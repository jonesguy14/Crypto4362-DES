Tests
=======================================================================================
Using params.txt with SDES settings, ensuring encryption and decryption are inverses
=======================================================================================
// First, high level encryption/decryption to ensure that it works as a whole.
// ptxt contains the phrase: Hello, how are you doing?
./proj1 -e -k340
    ctxt contains: x@µµ™!ÞÐ™œÞ(@Þ®™—ÞO™¿äÂ
./proj1 -d -k340 -oplain.txt
    plain.txt contains: Hello, how are you doing?

// From here on out, if our file contains for example the character 'A' we'll say that we're encrypting
// "01000001".
./proj1 -s -o- -k375 -e //Encrypting 10110101 from ptxt
    Block Size: 8
    Key Size: 10
    Eff Key Size: 10
    Round Key Size: 8
    Num Rounds: 2
    Perm1: 3 5 2 7 4 10 1 9 8 6
    Perm2: 6 3 7 4 8 5 10 9
    Rotation: 1 2
    Init permutation: 2 6 3 1 4 8 5 7
    Expand permutation: 4 1 2 3 2 3 4 1
    P-Box transposition: 2 4 3 1
    Num SBoxes: 2
    Row Select Bits: 1 4
    Column Select Bits: 2 3
    Sboxes
    1032
    3210
    0213
    3132
    ---------
    0123
    2013
    3010
    2103
    ---------

    Init permutation inverse: 4 1 3 5 7 2 8 6

    Initial Block: 10110101
    Key: 1101110101
    Initital Permutation: 01111100
    Left Split: 0111
    Right Split: 1100
    Round: 1
    Round Key: 10011011
    Expansion Permutation: 01101001
    XOR with Round Key: 11110010
    Sbox result: 1001
    Left: 1100
    Right: 0010
    Round: 2
    Round Key: 10111101
    Expansion Permutation: 00010100
    XOR with Round Key: 10101001
    Sbox result: 1010
    Left: 0010
    Right: 1111
    11101100

./proj1 -s -o- -k375 -d //Decrypting 11101100 from ctxt
    Block Size: 8
    Key Size: 10
    Eff Key Size: 10
    Round Key Size: 8
    Num Rounds: 2
    Perm1: 3 5 2 7 4 10 1 9 8 6
    Perm2: 6 3 7 4 8 5 10 9
    Rotation: 1 2
    Init permutation: 2 6 3 1 4 8 5 7
    Expand permutation: 4 1 2 3 2 3 4 1
    P-Box transposition: 2 4 3 1
    Num SBoxes: 2
    Row Select Bits: 1 4
    Column Select Bits: 2 3
    Sboxes
    1032
    3210
    0213
    3132
    ---------
    0123
    2013
    3010
    2103
    ---------

    Init permutation inverse: 4 1 3 5 7 2 8 6

    Initial Block: 11101100
    Key: 1101110101
    Initital Permutation: 11110010
    Left Split: 1111
    Right Split: 0010
    Round: 1
    Round Key: 10111101
    Expansion Permutation: 00010100
    XOR with Round Key: 10101001
    Sbox result: 1010
    Left: 0010
    Right: 1100
    Round: 2
    Round Key: 10011011
    Expansion Permutation: 01101001
    XOR with Round Key: 11110010
    Sbox result: 1001
    Left: 1100
    Right: 0111
    10110101 //Same as initial plaintext
    
Since this result is the same as the original plaintext, we can say that encryption
and decrpytion are inverses.

=======================================================================================
Testing flags and default values
=======================================================================================

*** Testing -o ***
==================
./proj1 -o- -e
    Result: 00010010 //key is read from key.txt, plain from ptxt

./proj1 -ooutput.txt -e
    //Nothing is displayed in stdout. output.txt has the information.

*** Testing -p ***
==================
//Using default params.txt
./proj1 -o- -e
    Result: 01110110

//Using paramsOther.txt, which has row and column selection bits switched
./proj1 -o- -e -pparamsOther.txt
    Result: 01010110 //different result means it did read the correct params file

*** Testing -k ***
==================
//Using default key.txt which is "10A"
./proj1 -o- -e 
    Result: 01100100

//Using inline key argument with -k
./proj1 -o- -e -k21B
    Result: 10010000 //different result, different key

*** Testing -i ***
==================
//Using default ptxt, which is "10000000"
./proj1 -o- -e 
    Result: 01100100

//using custom input file, plainNew which is "10100000"
./proj1 -o- -e -iplainNew
    Result: 11001100
    
*** Testing -e and -d ***
=========================
//-e should encrypt the input from ptxt and place it in ctxt
//-d should decrypt the input from ctxt and place it in ptxt
//ptxt contains 10010011 and ctxt is empty
./proj1 -e
    ctxt contains: 01100100
    
//Now I make ptxt an empty file again and do -d
./proj1 -d
    ptxt contains: 10010011
    
//This is our original input so -d and -e work accordingly.

//We will also try -e and -d with custom file names, pNew and cNew
//pNew contains 00011100 and ctxt is empty
./proj1 -e -ipNew -ocNew
    cNew contains: 01000010
    
//Now I make pNew an empty file again and do -d
./proj1 -d -opNew -icNew
    ptxt contains: 00011100
    
//This is our original input so -d and -e work accordingly with user files.
    
*** Testing -s ***
==================
//Using no -s so no steps should be displayed
./proj1 -o- -e 
    Result: 01100100
    
//Using -s so we can see intermediate steps
./proj1 -o- -e -s
    Block Size: 8
    Key Size: 10
    Eff Key Size: 10
    Round Key Size: 8
    Num Rounds: 2
    Perm1: 3 5 2 7 4 10 1 9 8 6
    Perm2: 6 3 7 4 8 5 10 9
    Rotation: 1 2
    Init permutation: 2 6 3 1 4 8 5 7
    Expand permutation: 4 1 2 3 2 3 4 1
    P-Box transposition: 2 4 3 1
    Num SBoxes: 2
    Row Select Bits: 1 4
    Column Select Bits: 2 3
    Sboxes
    1032
    3210
    0213
    3132
    ---------
    0123
    2013
    3010
    2103
    ---------

    Init permutation inverse: 4 1 3 5 7 2 8 6

    -----NEW BLOCK-----
    Initial Block: 10000000
    Key: 0100001010
    Initital Permutation: 00010000
    Left Split: 0001
    Right Split: 0000
    ---Round: 1---
    Round Key: 01100000
    Expansion Permutation: 00000000
    XOR with Round Key: 01100000
    Sbox result: 1000
    Left: 0000
    Right: 0000
    ---Round: 2---
    Round Key: 00000110
    Expansion Permutation: 00000000
    XOR with Round Key: 00000110
    Sbox result: 0111
    Left: 0000
    Right: 1110
    01100100

    Final result through all blocks: 01100100

*** Testing -x ***
==================
//Using no -x so should be in binary on ptxt "10000000"
./proj1 -o- -e 
    Result: 01100100
    
//Using -x so should read in as hex and output as hex on ptxt "1000"
./proj1 -o- -e -x
    Result: 8C22
    
//Using -x and -s so steps should show in hex
./proj1 -o- -e -x -s
    Block Size: 8
    Key Size: 10
    Eff Key Size: 10
    Round Key Size: 8
    Num Rounds: 2
    Perm1: 3 5 2 7 4 10 1 9 8 6
    Perm2: 6 3 7 4 8 5 10 9
    Rotation: 1 2
    Init permutation: 2 6 3 1 4 8 5 7
    Expand permutation: 4 1 2 3 2 3 4 1
    P-Box transposition: 2 4 3 1
    Num SBoxes: 2
    Row Select Bits: 1 4
    Column Select Bits: 2 3
    Sboxes
    1032
    3210
    0213
    3132
    ---------
    0123
    2013
    3010
    2103
    ---------

    Init permutation inverse: 4 1 3 5 7 2 8 6

    -----NEW BLOCK-----
    Initial Block: 10
    Key: 10a
    Initital Permutation: 8
    Left Split: 0
    Right Split: 8
    ---Round: 1---
    Round Key: 60
    Expansion Permutation: 41
    XOR with Round Key: 21
    Sbox result: 2
    Left: 8
    Right: 2
    ---Round: 2---
    Round Key: 6
    Expansion Permutation: 14
    XOR with Round Key: 12
    Sbox result: d
    Left: 2
    Right: 5
    8c

    -----NEW BLOCK-----
    Initial Block: 0
    Key: 10a
    Initital Permutation: 0
    Left Split: 0
    Right Split: 0
    ---Round: 1---
    Round Key: 60
    Expansion Permutation: 0
    XOR with Round Key: 60
    Sbox result: 8
    Left: 0
    Right: 1
    ---Round: 2---
    Round Key: 6
    Expansion Permutation: 82
    XOR with Round Key: 84
    Sbox result: 2
    Left: 1
    Right: 2
    22

    Final result through all blocks: 8c22

=======================================================================================
Testing white space in input file
=======================================================================================

//White space in input file should not affect our outcome
//The first file we use is ptxt, which is "1000" in ASCII
./proj1 -o- -e -x
    Result: b192
    
//Next, we change ptxt so it is now "1 0 0 0" (notice spaces)
    Result: b192
    
//Since results are the same, we can say that whitespace doesn't affect how we
//interpret the input.

=======================================================================================
Testing Block Padding
=======================================================================================

/* If input doesn't evenly divide the block size, it should fill in 0s at the end until
 * it does.
 * The first file we use is ptxt, which is "100" in ASCII hex, which is 12 bits. 
 * It should fill in 4 bits of 0s at the end and come up with the same result as the previous test.
 */
./proj1 -o- -e -x
    Result: b192
    
//Since results are the same, we can say that it properly filled them in.
